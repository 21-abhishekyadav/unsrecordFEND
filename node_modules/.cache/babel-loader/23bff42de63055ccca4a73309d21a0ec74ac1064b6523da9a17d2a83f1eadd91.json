{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  // Initialize category engagement if not already stored\n  useEffect(() => {\n    if (!localStorage.getItem(\"categoryEngagement\")) {\n      const categories = [\"Technology\", \"Health & Wellness\", \"Education & Learning\", \"Lifestyle & Productivity\", \"Entertainment & Pop Culture\", \"General\"];\n      const categoryData = categories.reduce((acc, category) => {\n        acc[category] = 0; // Initialize count as 0\n        return acc;\n      }, {});\n      localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n    }\n  }, []);\n\n  // Function to get posts dynamically based on category engagement\n  const getpost = async (page = 1, reset = false) => {\n    const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n    // Sort categories by engagement count\n    const sortedCategories = Object.entries(categoryData).sort(([, a], [, b]) => b - a);\n\n    // Calculate total engagement count\n    const totalEngagement = sortedCategories.reduce((sum, [, count]) => sum + count, 0);\n\n    // Calculate category percentage\n    const categoryDistribution = sortedCategories.map(([category, count]) => ({\n      category,\n      percentage: totalEngagement > 0 ? count / totalEngagement : 1 / sortedCategories.length // Default even distribution if no engagement\n    }));\n\n    // Assign number of posts per category (fetch 10 posts in total)\n    const categoryPostCounts = categoryDistribution.map(({\n      category,\n      percentage\n    }) => ({\n      category,\n      count: Math.round(percentage * 10)\n    }));\n    let allPosts = [];\n    for (const {\n      category,\n      count\n    } of categoryPostCounts) {\n      const response = await fetch(`${host}/posts?page=${page}&limit=${count}&categories=${category}`, {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const posts = await response.json();\n      allPosts = [...allPosts, ...posts];\n    }\n\n    // Update state with new posts\n    if (reset) {\n      setPosts(allPosts);\n    } else {\n      setPosts(prevPosts => [...prevPosts, ...allPosts]);\n    }\n    if (allPosts.length < 10) {\n      setHasMore(false); // No more posts to load\n    }\n  };\n\n  // Function to add a post\n  const addpost = async newpost => {\n    const {\n      Title,\n      Subheading,\n      Description,\n      Category\n    } = newpost;\n\n    // API CALL\n    const response = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description,\n        Category\n      })\n    });\n    const json = await response.json();\n\n    // Update category engagement count\n    updateCategoryEngagement(Category);\n    getpost(1, true); // Refresh posts after adding\n  };\n\n  // Function to update category engagement when a post is clicked or liked\n  const updateCategoryEngagement = category => {\n    const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n    categoryData[category] = (categoryData[category] || 0) + 1;\n    localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost,\n      hasMore\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"1/IqiLuroVKjKyCRZzxHZl9SZak=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","localStorage","getItem","categories","categoryData","reduce","acc","category","setItem","JSON","stringify","getpost","page","reset","parse","sortedCategories","Object","entries","sort","a","b","totalEngagement","sum","count","categoryDistribution","map","percentage","length","categoryPostCounts","Math","round","allPosts","response","fetch","method","headers","json","prevPosts","addpost","newpost","Title","Subheading","Description","Category","body","updateCategoryEngagement","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport postContext from './postContext';\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\";\n\n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n\n    // Initialize category engagement if not already stored\n    useEffect(() => {\n        if (!localStorage.getItem(\"categoryEngagement\")) {\n            const categories = [\n                \"Technology\",\n                \"Health & Wellness\",\n                \"Education & Learning\",\n                \"Lifestyle & Productivity\",\n                \"Entertainment & Pop Culture\",\n                \"General\"\n            ];\n            const categoryData = categories.reduce((acc, category) => {\n                acc[category] = 0; // Initialize count as 0\n                return acc;\n            }, {});\n            localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n        }\n    }, []);\n\n    // Function to get posts dynamically based on category engagement\n    const getpost = async (page = 1, reset = false) => {\n        const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n        // Sort categories by engagement count\n        const sortedCategories = Object.entries(categoryData).sort(([, a], [, b]) => b - a);\n\n        // Calculate total engagement count\n        const totalEngagement = sortedCategories.reduce((sum, [, count]) => sum + count, 0);\n\n        // Calculate category percentage\n        const categoryDistribution = sortedCategories.map(([category, count]) => ({\n            category,\n            percentage: totalEngagement > 0 ? (count / totalEngagement) : (1 / sortedCategories.length) // Default even distribution if no engagement\n        }));\n\n        // Assign number of posts per category (fetch 10 posts in total)\n        const categoryPostCounts = categoryDistribution.map(({ category, percentage }) => ({\n            category,\n            count: Math.round(percentage * 10)\n        }));\n\n        let allPosts = [];\n\n        for (const { category, count } of categoryPostCounts) {\n            const response = await fetch(`${host}/posts?page=${page}&limit=${count}&categories=${category}`, {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            const posts = await response.json();\n            allPosts = [...allPosts, ...posts];\n        }\n\n        // Update state with new posts\n        if (reset) {\n            setPosts(allPosts);\n        } else {\n            setPosts(prevPosts => [...prevPosts, ...allPosts]);\n        }\n\n        if (allPosts.length < 10) {\n            setHasMore(false);  // No more posts to load\n        }\n    };\n\n    // Function to add a post\n    const addpost = async (newpost) => {\n        const { Title, Subheading, Description, Category } = newpost;\n\n        // API CALL\n        const response = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title, Subheading, Description, Category })\n        });\n\n        const json = await response.json();\n\n        // Update category engagement count\n        updateCategoryEngagement(Category);\n\n        getpost(1, true); // Refresh posts after adding\n    };\n\n    // Function to update category engagement when a post is clicked or liked\n    const updateCategoryEngagement = (category) => {\n        const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n        categoryData[category] = (categoryData[category] || 0) + 1;\n        localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n    };\n\n    return (\n        <postContext.Provider value={{ posts, addpost, getpost, hasMore }}>\n            {props.children}\n        </postContext.Provider>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}