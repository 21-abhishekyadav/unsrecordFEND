{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const getpost = async (page = 1, reset = false) => {\n    try {\n      // Retrieve category engagement from local storage\n      const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n      // Send category engagement data as a query parameter\n      const response = await fetch(`${host}/posts?page=${page}&categories=${encodeURIComponent(JSON.stringify(categoryData))}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const json = await response.json();\n\n      // Update posts based on reset flag\n      setPosts(reset ? json : [...posts, ...json]);\n      if (json.length < 10) {\n        setHasMore(false); // No more posts to load\n      }\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error.message);\n    }\n  };\n\n  // add a post\n  const addpost = async newpost => {\n    const Title = newpost.Title;\n    const Subheading = newpost.Subheading;\n    const Description = newpost.Description;\n    const Category = newpost.Category;\n\n    //API CALL\n    const resposne = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description,\n        Category\n      })\n    });\n    const json = resposne.json();\n    getpost();\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"oBwjacU+cuIjrFQlKyvBl9ikzfg=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","getpost","page","reset","categoryData","JSON","parse","localStorage","getItem","response","fetch","encodeURIComponent","stringify","method","headers","ok","Error","status","json","length","error","console","message","addpost","newpost","Title","Subheading","Description","Category","resposne","body","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\"\n    \n \n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    \n\n\n    const getpost = async (page = 1, reset = false) => {\n        try {\n            // Retrieve category engagement from local storage\n            const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n    \n            // Send category engagement data as a query parameter\n            const response = await fetch(`${host}/posts?page=${page}&categories=${encodeURIComponent(JSON.stringify(categoryData))}`, {\n                method: \"GET\",\n                headers: { \"Content-Type\": \"application/json\" },\n            });\n    \n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    \n            const json = await response.json();\n    \n            // Update posts based on reset flag\n            setPosts(reset ? json : [...posts, ...json]);\n    \n            if (json.length < 10) {\n                setHasMore(false); // No more posts to load\n            }\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error.message);\n        }\n    };\n    \n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n        const Category = newpost.Category;\n\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title,Subheading, Description,Category })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n    \n\n\n\n    return (\n        <postContext.Provider value={{ posts,addpost,getpost}}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC,MAAMC,IAAI,GAAG,uBAAuB;EAGpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAI5C,MAAMY,OAAO,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,KAAK,KAAK;IAC/C,IAAI;MACA;MACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAC;;MAEjF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,IAAI,eAAeM,IAAI,eAAeS,kBAAkB,CAACN,IAAI,CAACO,SAAS,CAACR,YAAY,CAAC,CAAC,EAAE,EAAE;QACtHS,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAClD,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;MAE3E,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;;MAElC;MACApB,QAAQ,CAACK,KAAK,GAAGe,IAAI,GAAG,CAAC,GAAGrB,KAAK,EAAE,GAAGqB,IAAI,CAAC,CAAC;MAE5C,IAAIA,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;QAClBnB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD;EACJ,CAAC;;EAGD;EACA,MAAMC,OAAO,GAAG,MAAOC,OAAO,IAAK;IAC/B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAAU;IACrC,MAAMC,WAAW,GAAGH,OAAO,CAACG,WAAW;IACvC,MAAMC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;;IAGjC;IACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAAC,GAAGd,IAAI,gBAAgB,EAAE;MAClDiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAEP,YAAY,CAACC,OAAO,CAAC,OAAO;MAC9C,CAAC;MACDsB,IAAI,EAAEzB,IAAI,CAACO,SAAS,CAAC;QAAEa,KAAK;QAACC,UAAU;QAAEC,WAAW;QAACC;MAAS,CAAC;IAEnE,CAAC,CAAC;IACF,MAAMV,IAAI,GAAGW,QAAQ,CAACX,IAAI,CAAC,CAAC;IAC5BjB,OAAO,CAAC,CAAC;EACb,CAAC;EAMD,oBACIT,OAAA,CAACF,WAAW,CAACyC,QAAQ;IAACC,KAAK,EAAE;MAAEnC,KAAK;MAAC0B,OAAO;MAACtB;IAAO,CAAE;IAAAgC,QAAA,EACjDvC,KAAK,CAACuC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B;AAAC1C,EAAA,CAnEuBF,SAAS;AAAA6C,EAAA,GAAT7C,SAAS;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}