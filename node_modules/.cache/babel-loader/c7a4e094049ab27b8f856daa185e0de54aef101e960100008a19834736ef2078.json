{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  //something \n  const categories = [\"Technology\", \"Health & Wellness\", \"Education & Learning\", \"Lifestyle & Productivity\", \"Entertainment & Pop Culture\", \"General\"];\n  const getpost = async (page = 1, reset = false) => {\n    try {\n      let allPosts = [];\n\n      // Fetch posts from each category dynamically\n      for (const category of categories) {\n        const response = await fetch(`${host}/posts?page=${page}&limit=1&category=${encodeURIComponent(category)}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const json = await response.json();\n        allPosts = [...allPosts, ...json]; // Append posts from each category\n      }\n      setPosts(prevPosts => {\n        const newPosts = reset ? allPosts : [...prevPosts, ...allPosts];\n\n        // Remove duplicates based on unique post _id\n        const uniquePosts = Array.from(new Map(newPosts.map(post => [post._id, post])).values());\n        return uniquePosts;\n      });\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error.message);\n    }\n  };\n\n  // add a post\n  const addpost = async newpost => {\n    const Title = newpost.Title;\n    const Subheading = newpost.Subheading;\n    const Description = newpost.Description;\n    const Category = newpost.Category;\n\n    //API CALL\n    const resposne = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description,\n        Category\n      })\n    });\n    const json = resposne.json();\n    getpost();\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"oBwjacU+cuIjrFQlKyvBl9ikzfg=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","categories","getpost","page","reset","allPosts","category","response","fetch","encodeURIComponent","method","headers","ok","Error","status","json","prevPosts","newPosts","uniquePosts","Array","from","Map","map","post","_id","values","error","console","message","addpost","newpost","Title","Subheading","Description","Category","resposne","localStorage","getItem","body","JSON","stringify","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\"\n    \n \n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    \n\n    //something \n    const categories = [\n        \"Technology\",\n        \"Health & Wellness\",\n        \"Education & Learning\",\n        \"Lifestyle & Productivity\",\n        \"Entertainment & Pop Culture\",\n        \"General\"\n    ];\n    \n    const getpost = async (page = 1, reset = false) => {\n        try {\n            let allPosts = [];\n    \n            // Fetch posts from each category dynamically\n            for (const category of categories) {\n                const response = await fetch(`${host}/posts?page=${page}&limit=1&category=${encodeURIComponent(category)}`, {\n                    method: \"GET\",\n                    headers: { 'Content-Type': 'application/json' },\n                });\n    \n                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    \n                const json = await response.json();\n                allPosts = [...allPosts, ...json]; // Append posts from each category\n            }\n    \n            setPosts(prevPosts => {\n                const newPosts = reset ? allPosts : [...prevPosts, ...allPosts];\n    \n                // Remove duplicates based on unique post _id\n                const uniquePosts = Array.from(new Map(newPosts.map(post => [post._id, post])).values());\n                return uniquePosts;\n            });\n    \n        } catch (error) {\n            console.error(\"Error fetching posts:\", error.message);\n        }\n    };\n    \n    \n    \n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n        const Category = newpost.Category;\n\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title,Subheading, Description,Category })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n    \n\n\n\n    return (\n        <postContext.Provider value={{ posts,addpost,getpost}}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}