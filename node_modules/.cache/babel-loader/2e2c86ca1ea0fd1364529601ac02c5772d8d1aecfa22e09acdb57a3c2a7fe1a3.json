{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport postContext from \"./postContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  // Function to get posts dynamically based on category engagement\n  const getpost = async (page = 1, reset = false) => {\n    try {\n      const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n      // Sort categories by engagement count\n      const sortedCategories = Object.keys(categoryData).sort((a, b) => categoryData[b] - categoryData[a]);\n\n      // Create URL with categories as query params\n      const categoryQuery = sortedCategories.join(\",\");\n      const response = await fetch(`${host}/posts?page=${page}&limit=10&categories=${categoryQuery}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const newPosts = await response.json();\n      setPosts(reset ? newPosts : [...posts, ...newPosts]);\n      setHasMore(newPosts.length >= 10);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error.message);\n    }\n  };\n\n  // Function to add a post\n  const addpost = async newpost => {\n    try {\n      const {\n        Title,\n        Subheading,\n        Description,\n        Category\n      } = newpost;\n      const response = await fetch(`${host}/newpost`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          Title,\n          Subheading,\n          Description,\n          Category\n        })\n      });\n      if (!response.ok) throw new Error(`Failed to add post: ${response.statusText}`);\n      await response.json();\n      updateCategoryEngagement(Category);\n      getpost(1, true); // Refresh posts after adding\n    } catch (error) {\n      console.error(\"Error adding post:\", error.message);\n    }\n  };\n\n  // Function to update category engagement when a post is clicked or liked\n  const updateCategoryEngagement = category => {\n    const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n    categoryData[category] = (categoryData[category] || 0) + 1;\n    localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost,\n      hasMore\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"oBwjacU+cuIjrFQlKyvBl9ikzfg=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","getpost","page","reset","categoryData","JSON","parse","localStorage","getItem","sortedCategories","Object","keys","sort","a","b","categoryQuery","join","response","fetch","method","headers","ok","Error","status","newPosts","json","length","error","console","message","addpost","newpost","Title","Subheading","Description","Category","body","stringify","statusText","updateCategoryEngagement","category","setItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport postContext from \"./postContext\";\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\";\n\n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n\n    // Function to get posts dynamically based on category engagement\n    const getpost = async (page = 1, reset = false) => {\n        try {\n            const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n            // Sort categories by engagement count\n            const sortedCategories = Object.keys(categoryData).sort((a, b) => categoryData[b] - categoryData[a]);\n\n            // Create URL with categories as query params\n            const categoryQuery = sortedCategories.join(\",\");\n            const response = await fetch(`${host}/posts?page=${page}&limit=10&categories=${categoryQuery}`, {\n                method: \"GET\",\n                headers: { \"Content-Type\": \"application/json\" },\n            });\n\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n\n            const newPosts = await response.json();\n\n            setPosts(reset ? newPosts : [...posts, ...newPosts]);\n            setHasMore(newPosts.length >= 10);\n        } catch (error) {\n            console.error(\"Error fetching posts:\", error.message);\n        }\n    };\n\n    // Function to add a post\n    const addpost = async (newpost) => {\n        try {\n            const { Title, Subheading, Description, Category } = newpost;\n\n            const response = await fetch(`${host}/newpost`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"auth-token\": localStorage.getItem(\"token\"),\n                },\n                body: JSON.stringify({ Title, Subheading, Description, Category }),\n            });\n\n            if (!response.ok) throw new Error(`Failed to add post: ${response.statusText}`);\n\n            await response.json();\n\n            updateCategoryEngagement(Category);\n            getpost(1, true); // Refresh posts after adding\n        } catch (error) {\n            console.error(\"Error adding post:\", error.message);\n        }\n    };\n\n    // Function to update category engagement when a post is clicked or liked\n    const updateCategoryEngagement = (category) => {\n        const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n        categoryData[category] = (categoryData[category] || 0) + 1;\n        localStorage.setItem(\"categoryEngagement\", JSON.stringify(categoryData));\n    };\n\n    return (\n        <postContext.Provider value={{ posts, addpost, getpost, hasMore }}>\n            {props.children}\n        </postContext.Provider>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}