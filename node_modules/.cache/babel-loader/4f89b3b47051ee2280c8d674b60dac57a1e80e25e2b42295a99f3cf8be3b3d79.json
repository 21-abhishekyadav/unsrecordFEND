{"ast":null,"code":"import React,{useState}from'react';import postContext from'./postContext';import{jsx as _jsx}from\"react/jsx-runtime\";export default function NoteState(props){const host=\"https://unsrecordbend.onrender.com\";const[posts,setPosts]=useState([]);const[hasMore,setHasMore]=useState(true);//something  \nconst getpost=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let reset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const categoryData=JSON.parse(localStorage.getItem(\"categoryEngagement\"))||{};let totalEngagement=Object.values(categoryData).reduce((sum,count)=>sum+count,0)||1;let allPosts=[];// Sort categories by engagement count (descending order)\nconst sortedCategories=Object.entries(categoryData).sort((_ref,_ref2)=>{let[,a]=_ref;let[,b]=_ref2;return b-a;})// Sort by highest engagement first\n.map(_ref3=>{let[category]=_ref3;return category;});for(const category of sortedCategories){let categoryLimit=Math.round(categoryData[category]/totalEngagement*10)||1;// Distribute 10 posts\nconst response=await fetch(\"\".concat(host,\"/posts?page=\").concat(page,\"&limit=\").concat(categoryLimit,\"&category=\").concat(encodeURIComponent(category)),{method:\"GET\",headers:{'Content-Type':'application/json'}});if(!response.ok)throw new Error(\"HTTP error! Status: \".concat(response.status));const json=await response.json();allPosts=[...allPosts,...json];// Append posts from each category\n}setPosts(prevPosts=>{const newPosts=reset?allPosts:[...prevPosts,...allPosts];// Remove duplicates based on unique post _id\nconst uniquePosts=Array.from(new Map(newPosts.map(post=>[post._id,post])).values());return uniquePosts;});}catch(error){console.error(\"Error fetching posts:\",error.message);}};// add a post\nconst addpost=async newpost=>{const Title=newpost.Title;const Subheading=newpost.Subheading;const Description=newpost.Description;const Category=newpost.Category;//API CALL\nconst resposne=await fetch(\"\".concat(host,\"/posts/newpost\"),{method:\"POST\",headers:{'Content-Type':'application/json','auth-token':localStorage.getItem('token')},body:JSON.stringify({Title,Subheading,Description,Category})});const json=resposne.json();getpost();};return/*#__PURE__*/_jsx(postContext.Provider,{value:{posts,addpost,getpost},children:props.children});}","map":{"version":3,"names":["React","useState","postContext","jsx","_jsx","NoteState","props","host","posts","setPosts","hasMore","setHasMore","getpost","page","arguments","length","undefined","reset","categoryData","JSON","parse","localStorage","getItem","totalEngagement","Object","values","reduce","sum","count","allPosts","sortedCategories","entries","sort","_ref","_ref2","a","b","map","_ref3","category","categoryLimit","Math","round","response","fetch","concat","encodeURIComponent","method","headers","ok","Error","status","json","prevPosts","newPosts","uniquePosts","Array","from","Map","post","_id","error","console","message","addpost","newpost","Title","Subheading","Description","Category","resposne","body","stringify","Provider","value","children"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"https://unsrecordbend.onrender.com\"\n    \n \n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    \n\n    //something  \n   \n    const getpost = async (page = 1, reset = false) => {\n        try {\n            const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n            let totalEngagement = Object.values(categoryData).reduce((sum, count) => sum + count, 0) || 1;\n            let allPosts = [];\n    \n            // Sort categories by engagement count (descending order)\n            const sortedCategories = Object.entries(categoryData)\n                .sort(([, a], [, b]) => b - a) // Sort by highest engagement first\n                .map(([category]) => category);\n    \n            for (const category of sortedCategories) {\n                let categoryLimit = Math.round((categoryData[category] / totalEngagement) * 10) || 1; // Distribute 10 posts\n    \n                const response = await fetch(`${host}/posts?page=${page}&limit=${categoryLimit}&category=${encodeURIComponent(category)}`, {\n                    method: \"GET\",\n                    headers: { 'Content-Type': 'application/json' },\n                });\n    \n                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    \n                const json = await response.json();\n                allPosts = [...allPosts, ...json]; // Append posts from each category\n            }\n    \n            setPosts(prevPosts => {\n                const newPosts = reset ? allPosts : [...prevPosts, ...allPosts];\n    \n                // Remove duplicates based on unique post _id\n                const uniquePosts = Array.from(new Map(newPosts.map(post => [post._id, post])).values());\n                return uniquePosts;\n            });\n    \n        } catch (error) {\n            console.error(\"Error fetching posts:\", error.message);\n        }\n    };\n    \n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n        const Category = newpost.Category;\n\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title,Subheading, Description,Category })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n    \n\n\n\n    return (\n        <postContext.Provider value={{ posts,addpost,getpost}}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}