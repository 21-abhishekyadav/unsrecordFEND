{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  //get posts \n  const getpost = async (page = 1, reset = false) => {\n    const response = await fetch(`${host}/posts?page=${page}&limit=20`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const json = await response.json();\n    if (reset) {\n      setPosts(json);\n    } else {\n      setPosts(prevPosts => [...prevPosts, ...json]);\n    }\n    if (json.length < 20) {\n      setHasMore(false); // No more posts to load\n    }\n  };\n\n  // add a post\n  const addpost = async newpost => {\n    const Title = newpost.Title;\n    const Subheading = newpost.Subheading;\n    const Description = newpost.Description;\n\n    //API CALL\n    const resposne = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description\n      })\n    });\n    const json = resposne.json();\n    getpost();\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"oBwjacU+cuIjrFQlKyvBl9ikzfg=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","getpost","page","reset","response","fetch","method","headers","json","prevPosts","length","addpost","newpost","Title","Subheading","Description","resposne","localStorage","getItem","body","JSON","stringify","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\"\n    \n \n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    \n\n\n    //get posts \n    const getpost = async (page = 1, reset = false) => {\n        const response = await fetch(`${host}/posts?page=${page}&limit=20`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        const json = await response.json();\n        \n        if (reset) {\n            setPosts(json);\n        } else {\n            setPosts(prevPosts => [...prevPosts, ...json]);\n        }\n\n        if (json.length < 20) {\n            setHasMore(false);  // No more posts to load\n        }\n    };\n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title,Subheading, Description })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n    \n\n\n\n    return (\n        <postContext.Provider value={{ posts,addpost,getpost}}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC,MAAMC,IAAI,GAAG,uBAAuB;EAGpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAI5C;EACA,MAAMY,OAAO,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,KAAK,KAAK;IAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,IAAI,eAAeM,IAAI,WAAW,EAAE;MAChEI,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAElC,IAAIL,KAAK,EAAE;MACPL,QAAQ,CAACU,IAAI,CAAC;IAClB,CAAC,MAAM;MACHV,QAAQ,CAACW,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE,GAAGD,IAAI,CAAC,CAAC;IAClD;IAEA,IAAIA,IAAI,CAACE,MAAM,GAAG,EAAE,EAAE;MAClBV,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB;EACJ,CAAC;;EAED;EACA,MAAMW,OAAO,GAAG,MAAOC,OAAO,IAAK;IAC/B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAAU;IACrC,MAAMC,WAAW,GAAGH,OAAO,CAACG,WAAW;;IAEvC;IACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAC,GAAGT,IAAI,gBAAgB,EAAE;MAClDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAEU,YAAY,CAACC,OAAO,CAAC,OAAO;MAC9C,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAACC,UAAU;QAAEC;MAAY,CAAC;IAE1D,CAAC,CAAC;IACF,MAAMP,IAAI,GAAGQ,QAAQ,CAACR,IAAI,CAAC,CAAC;IAC5BP,OAAO,CAAC,CAAC;EACb,CAAC;EAMD,oBACIT,OAAA,CAACF,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAAE1B,KAAK;MAACc,OAAO;MAACV;IAAO,CAAE;IAAAuB,QAAA,EACjD9B,KAAK,CAAC8B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B;AAACjC,EAAA,CA3DuBF,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}