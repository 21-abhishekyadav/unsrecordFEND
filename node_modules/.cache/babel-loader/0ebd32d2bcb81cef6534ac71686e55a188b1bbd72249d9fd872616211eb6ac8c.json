{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [allposts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  //get posts \n  const getpost = async (page = 1, reset = false) => {\n    // Retrieve category engagement from local storage\n    const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n    // Sort categories based on engagement count (highest first)\n    const sortedCategories = Object.entries(categoryData).sort(([, a], [, b]) => b - a); // Sort by count descending\n\n    // Calculate total engagement count\n    const totalEngagement = sortedCategories.reduce((sum, [, count]) => sum + count, 0);\n\n    // Determine how many posts should be fetched per category based on percentage engagement\n    const categoryDistribution = sortedCategories.map(([category, count]) => ({\n      category,\n      percentage: totalEngagement > 0 ? count / totalEngagement : 1 / sortedCategories.length // Default even distribution if no engagement\n    }));\n\n    // Calculate how many posts per category (10 total posts)\n    const categoryPostCounts = categoryDistribution.map(({\n      category,\n      percentage\n    }) => ({\n      category,\n      count: Math.round(percentage * 10) // Fetch proportional posts\n    }));\n\n    // Fetch posts dynamically for each category\n    let allPosts = [];\n    for (const {\n      category,\n      count\n    } of categoryPostCounts) {\n      const response = await fetch(`${host}/posts?page=${page}&limit=${count}&categories=${category}`, {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const posts = await response.json();\n      allPosts = [...allPosts, ...posts];\n    }\n\n    // If reset is true, replace posts, otherwise append new posts\n    if (reset) {\n      SetPost(allPosts);\n    } else {\n      SetPost(prevPosts => [...prevPosts, ...allPosts]);\n    }\n    if (json.length < 20) {\n      setHasMore(false); // No more posts to load\n    }\n  };\n\n  // add a post\n  const addpost = async newpost => {\n    const Title = newpost.Title;\n    const Subheading = newpost.Subheading;\n    const Description = newpost.Description;\n    const Category = newpost.Category;\n\n    //API CALL\n    const resposne = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description,\n        Category\n      })\n    });\n    const json = resposne.json();\n    getpost();\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"4GOpCidzO2ULJ04of85OwnteDDU=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","allposts","setPosts","hasMore","setHasMore","getpost","page","reset","categoryData","JSON","parse","localStorage","getItem","sortedCategories","Object","entries","sort","a","b","totalEngagement","reduce","sum","count","categoryDistribution","map","category","percentage","length","categoryPostCounts","Math","round","allPosts","response","fetch","method","headers","posts","json","SetPost","prevPosts","addpost","newpost","Title","Subheading","Description","Category","resposne","body","stringify","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\"\n\n\n    const [allposts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n\n\n\n    //get posts \n    const getpost = async (page = 1, reset = false) => {\n        // Retrieve category engagement from local storage\n        const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n\n        // Sort categories based on engagement count (highest first)\n        const sortedCategories = Object.entries(categoryData)\n            .sort(([, a], [, b]) => b - a); // Sort by count descending\n\n        // Calculate total engagement count\n        const totalEngagement = sortedCategories.reduce((sum, [, count]) => sum + count, 0);\n\n        // Determine how many posts should be fetched per category based on percentage engagement\n        const categoryDistribution = sortedCategories.map(([category, count]) => ({\n            category,\n            percentage: totalEngagement > 0 ? (count / totalEngagement) : (1 / sortedCategories.length) // Default even distribution if no engagement\n        }));\n\n        // Calculate how many posts per category (10 total posts)\n        const categoryPostCounts = categoryDistribution.map(({ category, percentage }) => ({\n            category,\n            count: Math.round(percentage * 10) // Fetch proportional posts\n        }));\n\n        // Fetch posts dynamically for each category\n    let allPosts = [];\n    for (const { category, count } of categoryPostCounts) {\n        const response = await fetch(`${host}/posts?page=${page}&limit=${count}&categories=${category}`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        const posts = await response.json();\n        allPosts = [...allPosts, ...posts];\n    }\n\n    // If reset is true, replace posts, otherwise append new posts\n    if (reset) {\n        SetPost(allPosts);\n    } else {\n        SetPost(prevPosts => [...prevPosts, ...allPosts]);\n    }\n\n        if (json.length < 20) {\n            setHasMore(false);  // No more posts to load\n        }\n    };\n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n        const Category = newpost.Category;\n\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title, Subheading, Description, Category })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n\n\n\n\n    return (\n        <postContext.Provider value={{ posts, addpost, getpost }}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}