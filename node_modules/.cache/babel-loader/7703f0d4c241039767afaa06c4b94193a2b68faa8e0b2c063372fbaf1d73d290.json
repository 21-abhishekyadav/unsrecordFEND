{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport postContext from './postContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:4000\";\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  //something  \n\n  const getpost = async (page = 1, reset = false) => {\n    try {\n      const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n      let totalEngagement = Object.values(categoryData).reduce((sum, count) => sum + count, 0) || 1;\n      let allPosts = [];\n\n      // Sort categories by engagement count (descending order)\n      const sortedCategories = Object.entries(categoryData).sort(([, a], [, b]) => b - a) // Sort by highest engagement first\n      .map(([category]) => category);\n      for (const category of sortedCategories) {\n        let categoryLimit = Math.round(categoryData[category] / totalEngagement * 10) || 1; // Distribute 10 posts\n\n        const response = await fetch(`${host}/posts?page=${page}&limit=${categoryLimit}&category=${encodeURIComponent(category)}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const json = await response.json();\n        allPosts = [...allPosts, ...json]; // Append posts from each category\n      }\n      setPosts(prevPosts => {\n        const newPosts = reset ? allPosts : [...prevPosts, ...allPosts];\n\n        // Remove duplicates based on unique post _id\n        const uniquePosts = Array.from(new Map(newPosts.map(post => [post._id, post])).values());\n        return uniquePosts;\n      });\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error.message);\n    }\n  };\n\n  // add a post\n  const addpost = async newpost => {\n    const Title = newpost.Title;\n    const Subheading = newpost.Subheading;\n    const Description = newpost.Description;\n    const Category = newpost.Category;\n\n    //API CALL\n    const resposne = await fetch(`${host}/posts/newpost`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        Title,\n        Subheading,\n        Description,\n        Category\n      })\n    });\n    const json = resposne.json();\n    getpost();\n  };\n  return /*#__PURE__*/_jsxDEV(postContext.Provider, {\n    value: {\n      posts,\n      addpost,\n      getpost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteState, \"oBwjacU+cuIjrFQlKyvBl9ikzfg=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","postContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","posts","setPosts","hasMore","setHasMore","getpost","page","reset","categoryData","JSON","parse","localStorage","getItem","totalEngagement","Object","values","reduce","sum","count","allPosts","sortedCategories","entries","sort","a","b","map","category","categoryLimit","Math","round","response","fetch","encodeURIComponent","method","headers","ok","Error","status","json","prevPosts","newPosts","uniquePosts","Array","from","Map","post","_id","error","console","message","addpost","newpost","Title","Subheading","Description","Category","resposne","body","stringify","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhishekyadav/Desktop/WEBDEV/MERN/the project/FRONTEND/uscripted_records/src/context/PostState.js"],"sourcesContent":["import React, { useState } from 'react'\nimport postContext from './postContext';\n\n\nexport default function NoteState(props) {\n    const host = \"http://localhost:4000\"\n    \n \n    const [posts, setPosts] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    \n\n    //something  \n   \n    \n    const getpost = async (page = 1, reset = false) => {\n        try {\n            const categoryData = JSON.parse(localStorage.getItem(\"categoryEngagement\")) || {};\n            let totalEngagement = Object.values(categoryData).reduce((sum, count) => sum + count, 0) || 1;\n            let allPosts = [];\n    \n            // Sort categories by engagement count (descending order)\n            const sortedCategories = Object.entries(categoryData)\n                .sort(([, a], [, b]) => b - a) // Sort by highest engagement first\n                .map(([category]) => category);\n    \n            for (const category of sortedCategories) {\n                let categoryLimit = Math.round((categoryData[category] / totalEngagement) * 10) || 1; // Distribute 10 posts\n    \n                const response = await fetch(`${host}/posts?page=${page}&limit=${categoryLimit}&category=${encodeURIComponent(category)}`, {\n                    method: \"GET\",\n                    headers: { 'Content-Type': 'application/json' },\n                });\n    \n                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    \n                const json = await response.json();\n                allPosts = [...allPosts, ...json]; // Append posts from each category\n            }\n    \n            setPosts(prevPosts => {\n                const newPosts = reset ? allPosts : [...prevPosts, ...allPosts];\n    \n                // Remove duplicates based on unique post _id\n                const uniquePosts = Array.from(new Map(newPosts.map(post => [post._id, post])).values());\n                return uniquePosts;\n            });\n    \n        } catch (error) {\n            console.error(\"Error fetching posts:\", error.message);\n        }\n    };\n    \n\n    // add a post\n    const addpost = async (newpost) => {\n        const Title = newpost.Title;\n        const Subheading = newpost.Subheading;\n        const Description = newpost.Description;\n        const Category = newpost.Category;\n\n\n        //API CALL\n        const resposne = await fetch(`${host}/posts/newpost`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'auth-token': localStorage.getItem('token')\n            },\n            body: JSON.stringify({ Title,Subheading, Description,Category })\n\n        });\n        const json = resposne.json()\n        getpost()\n    }\n\n    \n\n\n\n    return (\n        <postContext.Provider value={{ posts,addpost,getpost}}>\n            {props.children}\n        </postContext.Provider>\n    )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}